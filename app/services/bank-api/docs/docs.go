// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Qiushi Yan",
            "url": "github.com/qiushiyan/simplebank/issues",
            "email": "qiushi.yann@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List accounts for the authenticated user in the token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "List accounts for user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page id, default to 1",
                        "name": "page_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size, default to 5",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db_generated.Account"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/accounts/all": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "list all accounts, available only to admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "List all accounts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page id, default to 1",
                        "name": "page_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size, default to 50",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accountgrp.ListAllAccountsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/accounts/create": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create an account with the given name and currency. Currency should be one of \"USD\", \"EUR\" or \"CAD\". Name-Currency combination should be unique.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Create an account",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountgrp.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accountgrp.CreateAccountResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/accounts/search": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Search accounts by owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Search accounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "owner name",
                        "name": "owner",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page id, default to 1",
                        "name": "page_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size, default to 10",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accountgrp.SearchAccountsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/accounts/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get account by id, token should match account owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Get an account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accountgrp.GetAccountResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update account by id, token should match account owner, currently only name can be updated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Update an account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "account id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountgrp.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/accountgrp.UpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            }
        },
        "/entries": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List entries for the account from the token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Entries"
                ],
                "summary": "List entries for an account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "from_account_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start Date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page ID",
                        "name": "page_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page Size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friend/create": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a friendship between two accounts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friendship"
                ],
                "summary": "Create a friendship",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/friendgrp.CreateFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/friendgrp.CreateFriendResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friend/list": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List friendship requests",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friendship"
                ],
                "summary": "List friendships",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "from account id",
                        "name": "from_account_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "to account id",
                        "name": "to_account_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "pending",
                        "name": "pending",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "accepted",
                        "name": "accepted",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page id, default to 1",
                        "name": "page_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page size, default to 50",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/friendgrp.ListFriendshipResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/friend/{id}": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update friendship status to be one of \"pending\", \"accepted\" or \"rejected\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friendship"
                ],
                "summary": "Update friendship status",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/friendgrp.UpdateRequest"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "friendship id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/friendgrp.UpdateFriendshipResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/liveness": {
            "get": {
                "description": "Liveness returns simple status info if the service is alive. If the app is deployed to a Kubernetes cluster, it will also return pod, node, and namespace details via the Downward API. The Kubernetes environment variables need to be set within your Pod/Deployment manifest.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check the service is alive",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkgrp.LivenessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/readiness": {
            "get": {
                "description": "Readiness checks if the database is ready and if not will return a 500 status. Do not respond by just returning an error because further up in the call stack it will interpret that as a non-trusted error.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check the service is ready",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/signin": {
            "post": {
                "description": "Signin with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Signin",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authgrp.SigninRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authgrp.SigninResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Signup with username, email and password. If email is provided, a welcome email will be scheduled as an asynchronous task and the task id will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authgrp.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/authgrp.SignupResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/task/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Inspect task state by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Inspect task state by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/taskgrp.GetTaskResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        }
    },
    "definitions": {
        "accountgrp.CreateAccountRequest": {
            "type": "object",
            "required": [
                "currency",
                "name"
            ],
            "properties": {
                "currency": {
                    "description": "one of: USD, EUR, CAD",
                    "type": "string"
                },
                "name": {
                    "description": "less than 30 characters",
                    "type": "string"
                }
            }
        },
        "accountgrp.CreateAccountResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/db_generated.Account"
                }
            }
        },
        "accountgrp.GetAccountResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/db_generated.Account"
                }
            }
        },
        "accountgrp.ListAllAccountsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db_generated.Account"
                    }
                }
            }
        },
        "accountgrp.SearchAccountsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db_generated.Account"
                    }
                }
            }
        },
        "accountgrp.UpdateRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "accountgrp.UpdateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/db_generated.Account"
                }
            }
        },
        "authgrp.SigninRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authgrp.SigninResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/authgrp.userResponse"
                }
            }
        },
        "authgrp.SignupRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email address (Optional)",
                    "type": "string"
                },
                "password": {
                    "description": "6 to 20 characters",
                    "type": "string"
                },
                "username": {
                    "description": "3 to 20 characters, only letters and numbers",
                    "type": "string"
                }
            }
        },
        "authgrp.SignupResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Access token for the user",
                    "type": "string"
                },
                "task_id": {
                    "description": "Task id for the email delivery task, if email is provided in the request",
                    "type": "string"
                },
                "user": {
                    "description": "The created user model",
                    "allOf": [
                        {
                            "$ref": "#/definitions/authgrp.userResponse"
                        }
                    ]
                }
            }
        },
        "authgrp.userResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password_changed_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "checkgrp.LivenessResponse": {
            "type": "object",
            "properties": {
                "GOMAXPROCS": {
                    "type": "string"
                },
                "build": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "node": {
                    "type": "string"
                },
                "podIP": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "db_generated.Account": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "db_generated.Friendship": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "from_account_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "to_account_id": {
                    "type": "integer"
                }
            }
        },
        "friendgrp.CreateFriendRequest": {
            "type": "object",
            "properties": {
                "fromAccountId": {
                    "description": "The sender account ID",
                    "type": "integer"
                },
                "toAccountId": {
                    "description": "The receiver account ID",
                    "type": "integer"
                }
            }
        },
        "friendgrp.CreateFriendResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/db_generated.Friendship"
                }
            }
        },
        "friendgrp.ListFriendshipResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db_generated.Friendship"
                    }
                }
            }
        },
        "friendgrp.UpdateFriendshipResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/db_generated.Friendship"
                }
            }
        },
        "friendgrp.UpdateRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "one of \"pending\", \"accepted\" or \"rejected\"",
                    "type": "string"
                }
            }
        },
        "taskcommon.State": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "The Error message if the task failed, otherwise omitted",
                    "type": "string"
                },
                "id": {
                    "description": "Task ID",
                    "type": "string"
                },
                "status": {
                    "description": "One of \"in_progress\", \"completed\", \"failed\", or \"other\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/taskcommon.Status"
                        }
                    ]
                },
                "type": {
                    "description": "Task Type",
                    "type": "string"
                }
            }
        },
        "taskcommon.Status": {
            "type": "object"
        },
        "taskgrp.GetTaskResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/taskcommon.State"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "SimpleBank API",
	Description:      "Example API for a banking system, see development notes at https://github.com/qiushiyan/simplebank",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
