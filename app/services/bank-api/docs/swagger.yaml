basePath: /
definitions:
  accountgrp.CreateAccountRequest:
    properties:
      currency:
        type: string
      name:
        type: string
    required:
    - currency
    - name
    type: object
  accountgrp.CreateAccountResponse:
    properties:
      data:
        $ref: '#/definitions/db_generated.Account'
    type: object
  accountgrp.GetAccountResponse:
    properties:
      data:
        $ref: '#/definitions/db_generated.Account'
    type: object
  accountgrp.ListAllAccountsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/db_generated.Account'
        type: array
    type: object
  accountgrp.SearchAccountsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/db_generated.Account'
        type: array
    type: object
  accountgrp.UpdateRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  accountgrp.UpdateResponse:
    properties:
      data:
        $ref: '#/definitions/db_generated.Account'
    type: object
  authgrp.SigninRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authgrp.SigninResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/authgrp.userResponse'
    type: object
  authgrp.SignupRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  authgrp.SignupResponse:
    properties:
      user:
        $ref: '#/definitions/authgrp.userResponse'
    type: object
  authgrp.userResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      password_changed_at:
        type: string
      username:
        type: string
    type: object
  checkgrp.LivenessResponse:
    properties:
      GOMAXPROCS:
        type: string
      build:
        type: string
      host:
        type: string
      name:
        type: string
      namespace:
        type: string
      node:
        type: string
      podIP:
        type: string
      status:
        type: string
    type: object
  db_generated.Account:
    properties:
      balance:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      id:
        type: integer
      name:
        type: string
      owner:
        type: string
    type: object
  db_generated.Friendship:
    properties:
      accepted:
        type: boolean
      created_at:
        type: string
      from_account_id:
        type: integer
      id:
        type: integer
      pending:
        type: boolean
      to_account_id:
        type: integer
    type: object
  friendgrp.CreateFriendRequest:
    properties:
      fromAccountId:
        type: integer
      toAccountId:
        type: integer
    type: object
  friendgrp.CreateFriendResponse:
    properties:
      data:
        $ref: '#/definitions/db_generated.Friendship'
    type: object
  friendgrp.ListFriendshipResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/db_generated.Friendship'
        type: array
    type: object
host: localhost:3000
info:
  contact:
    email: qiushi.yann@gmail.com
    name: Qiushi Yan
    url: github.com/qiushiyan/simplebank/issues
  description: Example API for a banking system, see development notes at https://github.com/qiushiyan/simplebank
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: SimpleBank API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: List accounts for the authenticated user in the token
      parameters:
      - description: page id, default to 1
        in: query
        name: page_id
        type: integer
      - description: page size, default to 5
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db_generated.Account'
            type: array
        "401":
          description: Unauthorized
        "409":
          description: Conflict
      security:
      - Bearer: []
      summary: List accounts for user
      tags:
      - Accounts
  /accounts/{id}:
    get:
      consumes:
      - application/json
      description: Get account by id, token should match account owner
      parameters:
      - description: account id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accountgrp.GetAccountResponse'
        "401":
          description: Unauthorized
        "409":
          description: Conflict
      security:
      - Bearer: []
      summary: Get an account
      tags:
      - Accounts
    patch:
      consumes:
      - application/json
      description: Update account by id, token should match account owner, currently
        only name can be updated
      parameters:
      - description: account id
        in: path
        name: id
        required: true
        type: integer
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/accountgrp.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accountgrp.UpdateResponse'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      security:
      - Bearer: []
      summary: Update an account
      tags:
      - Accounts
  /accounts/all:
    get:
      consumes:
      - application/json
      description: list all accounts, available only to admin
      parameters:
      - description: page id, default to 1
        in: query
        name: page_id
        type: integer
      - description: page size, default to 50
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accountgrp.ListAllAccountsResponse'
        "401":
          description: Unauthorized
        "409":
          description: Conflict
      security:
      - Bearer: []
      summary: List all accounts
      tags:
      - Accounts
  /accounts/create:
    post:
      consumes:
      - application/json
      description: Create an account with the given name and currency. Currency should
        be one of "USD", "EUR" or "CAD". Name-Currency combination should be unique.
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/accountgrp.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accountgrp.CreateAccountResponse'
        "400":
          description: Bad Request
        "409":
          description: Conflict
      security:
      - Bearer: []
      summary: Create an account
      tags:
      - Accounts
  /accounts/search:
    get:
      consumes:
      - application/json
      description: Search accounts by owner
      parameters:
      - description: owner name
        in: query
        name: owner
        required: true
        type: string
      - description: page id, default to 1
        in: query
        name: page_id
        type: integer
      - description: page size, default to 10
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/accountgrp.SearchAccountsResponse'
        "400":
          description: Bad Request
        "409":
          description: Conflict
      security:
      - Bearer: []
      summary: Search accounts
      tags:
      - Accounts
  /entries:
    get:
      consumes:
      - application/json
      description: List entries for the account from the token
      parameters:
      - description: Account ID
        in: query
        name: from_account_id
        required: true
        type: integer
      - description: Start Date
        in: query
        name: start_date
        type: string
      - description: End Date
        in: query
        name: end_date
        type: string
      - description: Page ID
        in: query
        name: page_id
        type: integer
      - description: Page Size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: List entries for an account
      tags:
      - Entries
  /friend/create:
    post:
      consumes:
      - application/json
      description: Create a friendship between two accounts
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/friendgrp.CreateFriendRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/friendgrp.CreateFriendResponse'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      security:
      - Bearer: []
      summary: Create a friendship
      tags:
      - Friendship
  /friend/list:
    get:
      consumes:
      - application/json
      description: List friendship requests
      parameters:
      - description: from account id
        in: query
        name: from_account_id
        type: integer
      - description: to account id
        in: query
        name: to_account_id
        type: integer
      - description: pending
        in: query
        name: pending
        type: boolean
      - description: accepted
        in: query
        name: accepted
        type: boolean
      - description: page id, default to 1
        in: query
        name: page_id
        type: integer
      - description: page size, default to 50
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/friendgrp.ListFriendshipResponse'
        "400":
          description: Bad Request
        "409":
          description: Conflict
      security:
      - Bearer: []
      summary: List friendships
      tags:
      - Friendship
  /liveness:
    get:
      description: Liveness returns simple status info if the service is alive. If
        the app is deployed to a Kubernetes cluster, it will also return pod, node,
        and namespace details via the Downward API. The Kubernetes environment variables
        need to be set within your Pod/Deployment manifest.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/checkgrp.LivenessResponse'
        "500":
          description: Internal Server Error
      summary: Check the service is alive
      tags:
      - Health
  /readiness:
    get:
      description: Readiness checks if the database is ready and if not will return
        a 500 status. Do not respond by just returning an error because further up
        in the call stack it will interpret that as a non-trusted error.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
      summary: Check the service is ready
      tags:
      - Health
  /signin:
    post:
      consumes:
      - application/json
      description: Signin with username and password
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authgrp.SigninRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authgrp.SigninResponse'
        "400":
          description: Bad Request
        "409":
          description: Conflict
      summary: Signin
      tags:
      - Authentication
  /signup:
    post:
      consumes:
      - application/json
      description: Signup with username, email and password
      parameters:
      - description: request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authgrp.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/authgrp.SignupResponse'
        "400":
          description: Bad Request
        "409":
          description: Conflict
      summary: Signup
      tags:
      - Authentication
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
